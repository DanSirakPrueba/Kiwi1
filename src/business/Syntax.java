/*
 * The main output of the program. This class manages the Syntax file that the
 * application will create.
 */
package business;
import java.io.*;
import java.util.Stack;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Kiwi
 */
public class Syntax {
    
	private static Stack<String> syntaxStack = new Stack<String>();
	private static Stack<String> auxStack = new Stack<String>();
	private static boolean canBeRedone=false;
	/**
	*This method takes a string (the output) and creates a .txt file with it.
	* @param result: the string generated by the application.
	*/
	public static void publishOutput() {
	
		File f = new File("Syntax.txt");
		
		FileWriter w = null;
            try {
                w = new FileWriter(f);
            } catch (IOException ex) {
                Logger.getLogger(Syntax.class.getName()).log(Level.SEVERE, null, ex);
            }
		BufferedWriter bw = new BufferedWriter(w);
		PrintWriter wr = new PrintWriter(bw);  
		List<String> auxList = new ArrayList<String>();
		try{
		while(!auxStack.empty()){ //Clears out the stack content
			auxStack.pop();
		}
		while(!syntaxStack.empty()){ //Prepares the lines to be written in the right order
			auxStack.push(syntaxStack.pop());
		}
		wr.write(auxStack.pop()); //It writes the first line
		
		while(!auxStack.empty()){ //This loop writes the following lines
			wr.append(auxStack.pop()); 
		}
		
		wr.close();
		bw.close();
		}catch(IOException e){};

	}
	
	public static void push(String line) {
		
		syntaxStack.push(line);
		canBeRedone=false;
	}
	
	public static void undo() {
		
		String line= syntaxStack.pop();
		if(!line.equals(null))
			auxStack.push(line);
		canBeRedone=true;
	}
	
	public static void redo() {
		if(!auxStack.empty())
			syntaxStack.push(auxStack.pop());
	
	}
}

